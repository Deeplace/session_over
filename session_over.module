<?php

/**
 * Implements hook_permission().
 */
function session_over_permission() {
  return array(
    'bypass session over' => array(
      'title' => t('Bypass session timeout'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function session_over_menu() {
  $items = array();
  
  $items['admin/config/people/sessions'] = array(
    'title'            => 'Session Timeout',
    'description'      => 'Control how the site deals with sessions.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('session_over_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_NORMAL_ITEM,
  );
  
  $items['check-session'] = array(
    'title'           => 'Check session',
    'page callback'   => 'session_over_check_page',
    'access callback' => 'user_is_logged_in',
    'type'            => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implements hook_boot().
 */
function session_over_boot() {
  if (variable_get('session_over_destroy_on_close', FALSE)) {
    ini_set('session.cookie_lifetime', 0);
  }
}

/**
 * Implementation of hook_init().
 */
function session_over_init() {
  $pages = array('check-session', 'user/login', 'user/logout');
  
  if (!in_array($_GET['q'], $pages)) {
    if (session_over_is_timedout()) {
      drupal_goto('user/logout');
    }
    
    if (session_over_account_affected()) {
      $settings = array(
        'timeout' => variable_get('session_over_timeout', 30 * 60),
        'message' => t("For your safety and protection your session has been timed out due to inactivity.\nYou must sign in again to resume using your account."),
        'checkUrl' => url('check-session'),
        'logoutUrl' => url('user/logout'),
      );
      
      drupal_add_js(array('session_over' => $settings), 'setting');
      drupal_add_js(drupal_get_path('module', 'session_over') .'/session_over.js');
      
      $_SESSION['last_access_time'] = time();
    }
  }
}

/**
 * Implements hook_user_login().
 */
function session_over_user_login(&$edit, $account) {
  if (isset($_SESSION['last_access_time'])) {
    unset($_SESSION['last_access_time']);
  }
}

/**
 * Implements hook_user_login().
 */
function session_over_user_logout($account) {
  if (isset($_SESSION['last_access_time'])) {
    unset($_SESSION['last_access_time']);
  }
}

/**
 * Session over settings form
 */
function session_over_settings_form() {
  $form['session_over_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Session times out in'),
    '#description' => t('Specify the time-to-live for user session, in case of user inactivity'),
    '#field_suffix' => 'seconds',
    '#default_value' => variable_get('session_over_timeout', 30 * 60),
  );
  
  $form['session_over_destroy_on_close'] = array(
    '#type' => 'checkbox',
    '#title' => t('Destroy the session on browser closing'),
    '#default_value' => variable_get('session_over_destroy_on_close', false),
  );
  
  return system_settings_form($form);
}

/**
 * Checks if session was not timed out
 */
function session_over_check_page() {
  $result = array(
    'is_active' => !session_over_is_timedout(),
    'idle_time' => time() - $_SESSION['last_access_time'],
  );
  drupal_json_output($result);
}

/**
 * Check if user is affected by session timeout
 *
 * @param object $account
 * @return bool
 */
function session_over_account_affected($account = NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }
  
  return $account->uid && !user_access('bypass session over', $account);
}

/**
 * Check if current user's session is timed out
 *
 * @return bool
 */
function session_over_is_timedout() {
  if (!empty($_SESSION['last_access_time']) && session_over_account_affected()) {
    return ($_SESSION['last_access_time'] < (time() - variable_get('session_over_timeout', 30 * 60)));
  }
  
  return FALSE;
}
