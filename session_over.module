<?php

/**
 * Implements hook_perm()
 */
function session_over_perm() {
  return array('administer session over');
}

/**
 * Implements hook_menu
 */
function session_over_menu() {
  $items = array();
  
  $items['admin/settings/sessions'] = array(
    'title'            => 'Session Over settings',
    'description'      => 'Control how the site deals with sessions.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('session_over_settings_form'),
    'access arguments' => array('administer session over'),
    'type'             => MENU_NORMAL_ITEM,
  );
  
  $items['check-session'] = array(
    'title'           => 'Check session',
    'page callback'   => 'session_over_check_session',
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implements hook_boot()
 */
function session_over_boot() {
  if (variable_get('session_over_destroy_on_close', false)) {
    ini_set('session.cookie_lifetime',  0);
  }
}

/**
 * Implementation of hook_init
 */
function session_over_init() {
  $pages = array('check-session', 'login', 'logout');
  
  if (!in_array(arg(0), $pages)) {
    if (session_over_is_timedout()) {
      drupal_goto('logout');
    }
    
    if (session_over_account_affected()) {
      $settings = array(
        'timeout' => variable_get('session_over_timeout', 1800),
        'message' => t("For your safety and protection your session has been timed out due to inactivity.\nYou must sign in again to resume using your account."),
        'check_url' => url('check-session'),
        'logout_url' => url('logout'),
      );
      
      drupal_add_js(array('session_over' => $settings), 'setting');
      drupal_add_js(drupal_get_path('module', 'session_over') .'/session_over.js');
      
      $_SESSION['last_access_time'] = time();
    }
  }
}

/**
 * Implements hook_user()
 */
function session_over_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'login' || $op == 'logout' && isset($_SESSION['last_access_time'])) {
    unset($_SESSION['last_access_time']);
  }
}

/**
 * Session over settings form
 */
function session_over_settings_form() {
  $form['session_over_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Session timeout'),
    '#description' => t('Specify the time-to-live for user session, in case of user inactivity'),
    '#default_value' => variable_get('session_over_timeout', 60 * 30),
  );
  
  $form['session_over_destroy_on_close'] = array(
    '#type' => 'checkbox',
    '#title' => t('Destroy session on browser close'),
    '#default_value' => variable_get('session_over_destroy_on_close', false),
  );

  $form['session_over_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Affected roles'),
    '#options' => user_roles(TRUE),
    '#default_value' => variable_get('session_over_roles', array()),
  );

  return system_settings_form($form);
}

/**
 * Checks if session was not timed out
 */
function session_over_check_session() {
  $result = array(
    'is_active' => !session_over_is_timedout(),
    'aa' => time() - $_SESSION['last_access_time'],
  );
  return drupal_json($result);
}

function session_over_account_affected($account = NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }
  
  // Check only for non-anonymous and non-superuser accounts
  if ($account->uid > 1) {
    $roles = array_filter(variable_get('session_over_roles', array()));
    foreach ($roles as $rid) {
      if (!empty($account->roles[$rid])) {
        return TRUE;
      }
    }
  }
  
  return FALSE;
}

function session_over_is_timedout() {
  if (!empty($_SESSION['last_access_time']) && session_over_account_affected()) {
    return ($_SESSION['last_access_time'] < (time() - variable_get('session_over_timeout', 1800)));
  }
  
  return FALSE;
}
